Apr 23:
- Memory and RIOT RAM initial implementation

Apr 25:
- Initial toying with Cpu interface, but mostly studying:
  - https://github.com/farhany/6502 - simple 6502 emu in Ruby, no timing, incompelte
  - http://www.llx.com/~nparker/a2/opcodes.html - sub-binary decoupling of 6502 instructions - teaches how to derive addressing mode , flag in branches, *very* useful to optimize implementations
  - http://visual6502.org/wiki/index.php?title=6502_all_256_Opcodes - used an opcode matrix ("Graham's table") and lists all "256" opcodes
    - has cycle cost
    - the flags must be studied more. Has stuff like read/write memory, which may lead to an automation of the implementation for such instructions
  - http://visual6502.org/JSSim/ that emulator that goes sub-transistor level. Source in https://github.com/trebonian/visual6502 . Has a nice testprogram
  - https://github.com/skilldrick/6502js/blob/master/assembler.js is an assembler and "simulator" in JAvascript. A few cool tricks (gotta read more):
     - functions named as their opcodes = instant decoding
     - functions call each other often
     - has an opcodes table which I may have seen on other links. Tells addressing mode and branching information
  - page in http://skilldrick.github.io/easy6502/#first-program uses the emulator above:
     - great 6502 tutorial
     - possible source of test programs
     - Cool list of machines using 6502, plus Bender and the TErminator (which come from wikipedia anyway: http://en.wikipedia.org/wiki/MOS_Technology_6502#In_popular_culture)

Gotta chose:
- how to test
- how to implement

Strategies:
- implement each instruction/test as a method
- parse one or more of the tables to run or check

Ideally, I'd use one of the strategies to implement and a different one to test (for each instruction). It must be tested if the PC is advancing accordingly (can be a generic test, a shared example inside the individual tests, or a table-aided test with the instruction lengths)

Apr 28:
- Refactored Memory/CPU from methods to array/hash like acessors (made CPU tests way easier)
- Implemented DEX instruction on CPU; refactored it to fetch/execute after I learned the increment of PC happens after fetch, but prior to execute
- Found this cool reference that might be used to generate the 6502 spec: http://homepage.ntlworld.com/cyborgsystems/CS_Main/6502/6502.htm - it also pointed me to how easier to implement and test will be if I decouple fetch and execute

Apr 29:
- No coding, but read a good part of this paper: https://github.com/redline6561/cl-6502/blob/master/docs/emulation/Study%20of%20the%20Techniques%20for%20Emulation%20Programming.pdf - must be referenced as "if you are going to read just one thing, read this one"
